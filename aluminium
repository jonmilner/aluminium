#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################
trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Aluminium failed  \e[31m\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# FUNCTIONS: Check for required functions file
###############################################################################
if [ -e functions ]; then
  cd "$(dirname "${BASH_SOURCE[0]}")" \
    && . "functions"
else
  printf "\n ⚠️  ./functions not found \n"
  exit 1
fi

###############################################################################
# Let's get started!       http://patorjk.com/software/taag/ ( font: Standard )
###############################################################################
printf "
 ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️
     _    _                 _       _
    / \  | |_   _ _ __ ___ (_)_ __ (_)_   _ _ __ ___
   / _ \ | | | | | '_ ' _ \| | '_ \| | | | | '_ ' _ \
  / ___ \| | |_| | | | | | | | | | | | |_| | | | | | |
 /_/   \_\_|\__,_|_| |_| |_|_|_| |_|_|\__,_|_| |_| |_|

 ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️ ⚪️

"

###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection..."
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password..."
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
chapter 'Checking for SSH key...'
ssh_key_setup

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies..."

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
  test -d "${xpath}" && test -x "${xpath}" ; then
  print_success_muted "Xcode already installed. Skipping."
else
  step "Installing Xcode..."
  xcode-select --install
  print_success "Xcode installed!"
fi

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# -----------------------------------------------------------------------------
# NVM
# -----------------------------------------------------------------------------
if [ -x nvm ]; then
  step "Installing NVM..."
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
  print_success "NVM installed!"
  step "Installing latest Node..."
  nvm install node
  nvm use node
  nvm run node --version
  nodev=$(node -v)
  print_success "Using Node $nodev!"
else
  print_success_muted "NVM/Node already installed. Skipping."
fi

# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------
if ! [ -x "$(command -v brew)" ]; then
  step "Installing Homebrew..."
  curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
  export PATH="/usr/local/bin:$PATH"
  print_success "Homebrew installed!"
else
  print_success_muted "Homebrew already installed. Skipping."
fi

if brew list | grep -Fq brew-cask; then
  step "Uninstalling old Homebrew-Cask..."
  brew uninstall --force brew-cask
  print_success "Homebrew-Cask uninstalled!"
fi

###############################################################################
# INSTALL: brews
###############################################################################
if [ -e $cwd/install/brews ]; then
  chapter "Installing Homebrew formulae..."

  for brew in $(<$cwd/install/brews); do
    install_brews $brew
  done
fi

###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew formulae..."
brew update

###############################################################################
# INSTALL: casks
###############################################################################
if [ -e $cwd/install/casks ]; then
  chapter "Installing apps via Homebrew..."

  for cask in $(<$cwd/install/casks); do
    install_application_via_brew $cask
  done
fi

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
chapter "Installing apps from App Store..."
if [ -x mas ]; then

  print_warning "Please install mas-cli first: brew mas. Skipping."

  else

  if [ -e $cwd/install/apps ]; then
    if mas_setup; then
      # Workaround for associative array in Bash 3
      # https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
      for app in $(<$cwd/install/apps); do
        KEY="${app%%::*}"
        VALUE="${app##*::}"
        install_application_via_app_store $KEY $VALUE
      done
    else
      print_warning "Please signin to App Store first. Skipping."
    fi
  fi

fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files..."
brew cleanup 2> /dev/null

###############################################################################
# INSTALL: npm packages
###############################################################################
if [ -e $cwd/install/npm ]; then
  chapter "Installing npm packages..."

  for pkg in $(<$cwd/install/npm); do
    KEY="${pkg%%::*}"
    VALUE="${pkg##*::}"
    install_npm_packages $KEY $VALUE
  done
fi

###############################################################################
# SETUP: macOS setup scripts
###############################################################################
if [ -e $cwd/install/open ]; then
  chapter "Setting up macOS"

  if ask "Do you want to run macOS setup scripts?" Y; then
    sh macos/set-defaults.sh
  else
    print_success_muted "Skipping macOS setup.";
  fi
fi

###############################################################################
# SETUP: Set ForkLift as default Finder
###############################################################################
if [[ ! $(brew cask list | grep forklift) ]]; then
  chapter "Set ForkLift as default Finder"

  if ask "Do you want to set ForkLift as default Finder?" Y; then
    defaults write -g NSFileViewer -string com.binarynights.ForkLift-3
  else
    print_success_muted "Skipping ForkLift setup.";
  fi
fi

###############################################################################
# SETUP: Open Applications
###############################################################################
if [ -e $cwd/install/open ]; then
  chapter "Open Applications..."

  if ask "Do you want to open and set up new applications?" Y; then

  SAVEIFS=$IFS
  IFS=$'\n'

  for app in $(<$cwd/install/open); do
    open_application "$app"
  done

  IFS=$SAVEIFS

  else
    print_success_muted "Skipping opening applications.";
  fi
fi

###############################################################################
# Symlinks
###############################################################################
chapter "Creating symlinks for dotfiles"

# Git
ln -sfn aluminium/dotfiles/git/gitconfig ~/.gitconfig
ln -sfn aluminium/dotfiles/git/gitignore ~/.gitignore

# Hyper
ln -sfn aluminium/dotfiles/hyper.js ~/.hyper.js

# Mackup
ln -sfn aluminium/dotfiles/mackup.cfg ~/.mackup.cfg

# npm
ln -sfn aluminium/dotfiles/npmrc ~/.npmrc

# zsh
ln -sfn aluminium/dotfiles/zsh/zshrc ~/.zshrc

print_success "Symlinks created!"

###############################################################################
# 🎉
###############################################################################
printf "
 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉

  ${bold}Congrats! You're all set up!${normal}

 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉

"
